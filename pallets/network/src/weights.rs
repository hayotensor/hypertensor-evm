
//! Autogenerated weights for `pallet_network`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-07-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/solochain-template-runtime/solochain_template_runtime.compact.compressed.wasm
// --extrinsic
// 
// --pallet
// pallet_network
// --output
// pallets/network/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_network`.
pub trait WeightInfo {
	fn get_epoch_emissions() -> Weight;
	fn precheck_consensus_submission() -> Weight;
	fn calculate_rewards_v2() -> Weight;
	fn distribute_rewards() -> Weight;
	fn elect_validator_v3() -> Weight;
	fn calculate_subnet_weights() -> Weight;
	fn get_random_number() -> Weight;
	fn calculate_overwatch_rewards() -> Weight;
	fn calculate_overwatch_rewards_v2() -> Weight;
}

/// Weights for `pallet_network` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Network::MaxSubnets` (r:1 w:0)
	/// Proof: `Network::MaxSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:0)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidMidpoint` (r:1 w:0)
	/// Proof: `Network::SigmoidMidpoint` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidSteepness` (r:1 w:0)
	/// Proof: `Network::SigmoidSteepness` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn get_epoch_emissions() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1353`
		//  Estimated: `2838`
		// Minimum execution time: 27_072_000 picoseconds.
		Weight::from_parts(31_345_000, 2838)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn precheck_consensus_submission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118461`
		//  Estimated: `121926`
		// Minimum execution time: 454_192_000 picoseconds.
		Weight::from_parts(484_908_000, 121926)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_rewards_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118461`
		//  Estimated: `121926`
		// Minimum execution time: 454_158_000 picoseconds.
		Weight::from_parts(501_720_000, 121926)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::IdleClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IdleClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwner` (r:1 w:0)
	/// Proof: `Network::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:1)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35658`
		//  Estimated: `1303848`
		// Minimum execution time: 4_861_691_000 picoseconds.
		Weight::from_parts(5_249_305_000, 1303848)
			.saturating_add(T::DbWeight::get().reads(1043_u64))
			.saturating_add(T::DbWeight::get().writes(521_u64))
	}
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:1 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn elect_validator_v3() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2747`
		//  Estimated: `6212`
		// Minimum execution time: 34_274_000 picoseconds.
		Weight::from_parts(39_884_000, 6212)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_subnet_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7262`
		//  Estimated: `169127`
		// Minimum execution time: 526_972_000 picoseconds.
		Weight::from_parts(620_895_000, 169127)
			.saturating_add(T::DbWeight::get().reads(130_u64))
	}
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn get_random_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `4079`
		// Minimum execution time: 4_957_000 picoseconds.
		Weight::from_parts(5_965_000, 4079)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:0)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodeWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchNodeWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 62_354_000 picoseconds.
		Weight::from_parts(72_623_000, 14061)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:0)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodeWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchNodeWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 48_975_000 picoseconds.
		Weight::from_parts(55_279_000, 14061)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Network::MaxSubnets` (r:1 w:0)
	/// Proof: `Network::MaxSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:0)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidMidpoint` (r:1 w:0)
	/// Proof: `Network::SigmoidMidpoint` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidSteepness` (r:1 w:0)
	/// Proof: `Network::SigmoidSteepness` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn get_epoch_emissions() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1353`
		//  Estimated: `2838`
		// Minimum execution time: 27_072_000 picoseconds.
		Weight::from_parts(31_345_000, 2838)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn precheck_consensus_submission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118461`
		//  Estimated: `121926`
		// Minimum execution time: 454_192_000 picoseconds.
		Weight::from_parts(484_908_000, 121926)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_rewards_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118461`
		//  Estimated: `121926`
		// Minimum execution time: 454_158_000 picoseconds.
		Weight::from_parts(501_720_000, 121926)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::IdleClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IdleClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwner` (r:1 w:0)
	/// Proof: `Network::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:1)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35658`
		//  Estimated: `1303848`
		// Minimum execution time: 4_861_691_000 picoseconds.
		Weight::from_parts(5_249_305_000, 1303848)
			.saturating_add(RocksDbWeight::get().reads(1043_u64))
			.saturating_add(RocksDbWeight::get().writes(521_u64))
	}
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:1 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn elect_validator_v3() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2747`
		//  Estimated: `6212`
		// Minimum execution time: 34_274_000 picoseconds.
		Weight::from_parts(39_884_000, 6212)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_subnet_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7262`
		//  Estimated: `169127`
		// Minimum execution time: 526_972_000 picoseconds.
		Weight::from_parts(620_895_000, 169127)
			.saturating_add(RocksDbWeight::get().reads(130_u64))
	}
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn get_random_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `4079`
		// Minimum execution time: 4_957_000 picoseconds.
		Weight::from_parts(5_965_000, 4079)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:0)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodeWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchNodeWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 62_354_000 picoseconds.
		Weight::from_parts(72_623_000, 14061)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:0)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodeWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchNodeWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 48_975_000 picoseconds.
		Weight::from_parts(55_279_000, 14061)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}