
//! Autogenerated weights for `pallet_network`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-08-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/solochain-template-runtime/solochain_template_runtime.compact.compressed.wasm
// --extrinsic
// 
// --pallet
// pallet_network
// --output
// pallets/network/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_network`.
pub trait WeightInfo {
	fn get_epoch_emissions() -> Weight;
	fn precheck_subnet_consensus_submission() -> Weight;
	fn calculate_rewards() -> Weight;
	fn distribute_rewards() -> Weight;
	fn elect_validator_v3() -> Weight;
	fn calculate_subnet_weights() -> Weight;
	fn calculate_subnet_weights_v2() -> Weight;
	fn get_random_number() -> Weight;
	fn calculate_overwatch_rewards() -> Weight;
	fn calculate_overwatch_rewards_v2() -> Weight;
	fn get_removing_node() -> Weight;
	fn do_epoch_preliminaries() -> Weight;
}

/// Weights for `pallet_network` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Network::MaxSubnets` (r:1 w:0)
	/// Proof: `Network::MaxSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:0)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidMidpoint` (r:1 w:0)
	/// Proof: `Network::SigmoidMidpoint` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidSteepness` (r:1 w:0)
	/// Proof: `Network::SigmoidSteepness` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn get_epoch_emissions() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1359`
		//  Estimated: `2844`
		// Minimum execution time: 27_319_000 picoseconds.
		Weight::from_parts(31_719_000, 2844)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn precheck_subnet_consensus_submission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119002`
		//  Estimated: `122467`
		// Minimum execution time: 510_672_000 picoseconds.
		Weight::from_parts(625_133_000, 122467)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119002`
		//  Estimated: `122467`
		// Minimum execution time: 523_310_000 picoseconds.
		Weight::from_parts(637_609_000, 122467)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::IdleClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IdleClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeScorePenaltyThreshold` (r:1 w:0)
	/// Proof: `Network::SubnetNodeScorePenaltyThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwner` (r:1 w:0)
	/// Proof: `Network::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:1)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35831`
		//  Estimated: `1304021`
		// Minimum execution time: 5_364_828_000 picoseconds.
		Weight::from_parts(6_247_314_000, 1304021)
			.saturating_add(T::DbWeight::get().reads(1044_u64))
			.saturating_add(T::DbWeight::get().writes(521_u64))
	}
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:1 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn elect_validator_v3() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2777`
		//  Estimated: `6242`
		// Minimum execution time: 42_577_000 picoseconds.
		Weight::from_parts(57_127_000, 6242)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::OverwatchEpochLengthMultiplier` (r:1 w:0)
	/// Proof: `Network::OverwatchEpochLengthMultiplier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:1 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_subnet_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8292`
		//  Estimated: `170157`
		// Minimum execution time: 627_542_000 picoseconds.
		Weight::from_parts(726_938_000, 170157)
			.saturating_add(T::DbWeight::get().reads(134_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalElectableNodes` (r:1 w:0)
	/// Proof: `Network::TotalElectableNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::OverwatchEpochLengthMultiplier` (r:1 w:0)
	/// Proof: `Network::OverwatchEpochLengthMultiplier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:1 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeWeightFactor` (r:1 w:0)
	/// Proof: `Network::DelegateStakeWeightFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetElectableNodes` (r:64 w:0)
	/// Proof: `Network::TotalSubnetElectableNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:64 w:0)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_subnet_weights_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9197`
		//  Estimated: `171062`
		// Minimum execution time: 797_510_000 picoseconds.
		Weight::from_parts(956_206_000, 171062)
			.saturating_add(T::DbWeight::get().reads(264_u64))
	}
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn get_random_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `4079`
		// Minimum execution time: 4_610_000 picoseconds.
		Weight::from_parts(5_185_000, 4079)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:1)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:2)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodeWeights` (r:3 w:2)
	/// Proof: `Network::OverwatchNodeWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 65_005_000 picoseconds.
		Weight::from_parts(76_260_000, 14061)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:1)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:2)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 53_046_000 picoseconds.
		Weight::from_parts(61_348_000, 14061)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::RegisteredSubnetNodesData` (r:1 w:0)
	/// Proof: `Network::RegisteredSubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeRemovalSystemV2` (r:1 w:0)
	/// Proof: `Network::NodeRemovalSystemV2` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:513 w:0)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeDelegateStakeBalance` (r:513 w:0)
	/// Proof: `Network::NodeDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:513 w:0)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:512 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_removing_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234884`
		//  Estimated: `1505549`
		// Minimum execution time: 10_476_372_000 picoseconds.
		Weight::from_parts(10_884_211_000, 1505549)
			.saturating_add(T::DbWeight::get().reads(2566_u64))
	}
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpochs` (r:1 w:0)
	/// Proof: `Network::SubnetRegistrationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetActivationEnactmentEpochs` (r:1 w:0)
	/// Proof: `Network::SubnetActivationEnactmentEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MinSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnets` (r:1 w:0)
	/// Proof: `Network::MaxSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPauseEpochs` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPauseEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:64)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:0)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Network::TotalStake` (r:1 w:0)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodeDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalNodeDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetDelegateStakeFactor` (r:1 w:0)
	/// Proof: `Network::MinSubnetDelegateStakeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:64 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxMinDelegateStakeMultiplier` (r:1 w:0)
	/// Proof: `Network::MaxMinDelegateStakeMultiplier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AssignedSlots` (r:1 w:1)
	/// Proof: `Network::AssignedSlots` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetSlot` (r:64 w:64)
	/// Proof: `Network::SubnetSlot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnets` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:32768 w:32768)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnetNodes` (r:64 w:64)
	/// Proof: `Network::TotalActiveSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SlotAssignment` (r:0 w:64)
	/// Proof: `Network::SlotAssignment` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRepo` (r:0 w:64)
	/// Proof: `Network::SubnetRepo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInitialColdkeys` (r:0 w:64)
	/// Proof: `Network::SubnetRegistrationInitialColdkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetName` (r:0 w:64)
	/// Proof: `Network::SubnetName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpoch` (r:0 w:64)
	/// Proof: `Network::SubnetRegistrationEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_epoch_preliminaries() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13219147`
		//  Estimated: `94320937`
		// Minimum execution time: 96_703_082_000 picoseconds.
		Weight::from_parts(104_738_218_000, 94320937)
			.saturating_add(T::DbWeight::get().reads(33109_u64))
			.saturating_add(T::DbWeight::get().writes(33285_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Network::MaxSubnets` (r:1 w:0)
	/// Proof: `Network::MaxSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:0)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidMidpoint` (r:1 w:0)
	/// Proof: `Network::SigmoidMidpoint` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SigmoidSteepness` (r:1 w:0)
	/// Proof: `Network::SigmoidSteepness` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn get_epoch_emissions() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1359`
		//  Estimated: `2844`
		// Minimum execution time: 27_319_000 picoseconds.
		Weight::from_parts(31_719_000, 2844)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn precheck_subnet_consensus_submission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119002`
		//  Estimated: `122467`
		// Minimum execution time: 510_672_000 picoseconds.
		Weight::from_parts(625_133_000, 122467)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119002`
		//  Estimated: `122467`
		// Minimum execution time: 523_310_000 picoseconds.
		Weight::from_parts(637_609_000, 122467)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::IdleClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IdleClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeScorePenaltyThreshold` (r:1 w:0)
	/// Proof: `Network::SubnetNodeScorePenaltyThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwner` (r:1 w:0)
	/// Proof: `Network::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:1)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35831`
		//  Estimated: `1304021`
		// Minimum execution time: 5_364_828_000 picoseconds.
		Weight::from_parts(6_247_314_000, 1304021)
			.saturating_add(RocksDbWeight::get().reads(1044_u64))
			.saturating_add(RocksDbWeight::get().writes(521_u64))
	}
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:1 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn elect_validator_v3() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2777`
		//  Estimated: `6242`
		// Minimum execution time: 42_577_000 picoseconds.
		Weight::from_parts(57_127_000, 6242)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::OverwatchEpochLengthMultiplier` (r:1 w:0)
	/// Proof: `Network::OverwatchEpochLengthMultiplier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:1 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_subnet_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8292`
		//  Estimated: `170157`
		// Minimum execution time: 627_542_000 picoseconds.
		Weight::from_parts(726_938_000, 170157)
			.saturating_add(RocksDbWeight::get().reads(134_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalElectableNodes` (r:1 w:0)
	/// Proof: `Network::TotalElectableNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::OverwatchEpochLengthMultiplier` (r:1 w:0)
	/// Proof: `Network::OverwatchEpochLengthMultiplier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:0)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:1 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::DelegateStakeWeightFactor` (r:1 w:0)
	/// Proof: `Network::DelegateStakeWeightFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetElectableNodes` (r:64 w:0)
	/// Proof: `Network::TotalSubnetElectableNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:64 w:0)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_subnet_weights_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `9197`
		//  Estimated: `171062`
		// Minimum execution time: 797_510_000 picoseconds.
		Weight::from_parts(956_206_000, 171062)
			.saturating_add(RocksDbWeight::get().reads(264_u64))
	}
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn get_random_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `4079`
		// Minimum execution time: 4_610_000 picoseconds.
		Weight::from_parts(5_185_000, 4079)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:1)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:2)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodeWeights` (r:3 w:2)
	/// Proof: `Network::OverwatchNodeWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 65_005_000 picoseconds.
		Weight::from_parts(76_260_000, 14061)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Network::TotalOverwatchStake` (r:1 w:1)
	/// Proof: `Network::TotalOverwatchStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchReveals` (r:5 w:0)
	/// Proof: `Network::OverwatchReveals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchNodes` (r:2 w:0)
	/// Proof: `Network::OverwatchNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountOverwatchStake` (r:2 w:2)
	/// Proof: `Network::AccountOverwatchStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::OverwatchSubnetWeights` (r:0 w:2)
	/// Proof: `Network::OverwatchSubnetWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_overwatch_rewards_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `696`
		//  Estimated: `14061`
		// Minimum execution time: 53_046_000 picoseconds.
		Weight::from_parts(61_348_000, 14061)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Network::RegisteredSubnetNodesData` (r:1 w:0)
	/// Proof: `Network::RegisteredSubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeRemovalSystemV2` (r:1 w:0)
	/// Proof: `Network::NodeRemovalSystemV2` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:513 w:0)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::NodeDelegateStakeBalance` (r:513 w:0)
	/// Proof: `Network::NodeDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:513 w:0)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:512 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_removing_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `234884`
		//  Estimated: `1505549`
		// Minimum execution time: 10_476_372_000 picoseconds.
		Weight::from_parts(10_884_211_000, 1505549)
			.saturating_add(RocksDbWeight::get().reads(2566_u64))
	}
	/// Storage: `Network::MaxSubnetPenaltyCount` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPenaltyCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpochs` (r:1 w:0)
	/// Proof: `Network::SubnetRegistrationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetActivationEnactmentEpochs` (r:1 w:0)
	/// Proof: `Network::SubnetActivationEnactmentEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MinSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnets` (r:1 w:0)
	/// Proof: `Network::MaxSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetPauseEpochs` (r:1 w:0)
	/// Proof: `Network::MaxSubnetPauseEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:64)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:0)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Network::TotalStake` (r:1 w:0)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodeDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalNodeDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetDelegateStakeFactor` (r:1 w:0)
	/// Proof: `Network::MinSubnetDelegateStakeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:64 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxMinDelegateStakeMultiplier` (r:1 w:0)
	/// Proof: `Network::MaxMinDelegateStakeMultiplier` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AssignedSlots` (r:1 w:1)
	/// Proof: `Network::AssignedSlots` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetSlot` (r:64 w:64)
	/// Proof: `Network::SubnetSlot` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnets` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:32768 w:32768)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnetNodes` (r:64 w:64)
	/// Proof: `Network::TotalActiveSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SlotAssignment` (r:0 w:64)
	/// Proof: `Network::SlotAssignment` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRepo` (r:0 w:64)
	/// Proof: `Network::SubnetRepo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInitialColdkeys` (r:0 w:64)
	/// Proof: `Network::SubnetRegistrationInitialColdkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetName` (r:0 w:64)
	/// Proof: `Network::SubnetName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpoch` (r:0 w:64)
	/// Proof: `Network::SubnetRegistrationEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_epoch_preliminaries() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `13219147`
		//  Estimated: `94320937`
		// Minimum execution time: 96_703_082_000 picoseconds.
		Weight::from_parts(104_738_218_000, 94320937)
			.saturating_add(RocksDbWeight::get().reads(33109_u64))
			.saturating_add(RocksDbWeight::get().writes(33285_u64))
	}
}