
//! Autogenerated weights for `pallet_network`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-07-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/solochain-template-runtime/solochain_template_runtime.compact.compressed.wasm
// --extrinsic
// 
// --pallet
// pallet_network
// --output
// pallets/network/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_network`.
pub trait WeightInfo {
	fn elect_validator_v2() -> Weight;
	fn emission_step() -> Weight;
}

/// Weights for `pallet_network` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:1 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn elect_validator_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2773`
		//  Estimated: `6238`
		// Minimum execution time: 28_110_000 picoseconds.
		Weight::from_parts(30_815_000, 6238)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::FinalSubnetEmissionWeights` (r:1 w:0)
	/// Proof: `Network::FinalSubnetEmissionWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetDelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetDelegateStakeRewardsPercentage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwnerPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetOwnerPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationIncreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationIncreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationDecreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationDecreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::QueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::QueueClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn emission_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390340`
		//  Estimated: `1658530`
		// Minimum execution time: 12_131_847_000 picoseconds.
		Weight::from_parts(14_235_272_000, 1658530)
			.saturating_add(T::DbWeight::get().reads(1043_u64))
			.saturating_add(T::DbWeight::get().writes(517_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeElectionSlots` (r:1 w:0)
	/// Proof: `Network::SubnetNodeElectionSlots` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn elect_validator_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2773`
		//  Estimated: `6238`
		// Minimum execution time: 28_110_000 picoseconds.
		Weight::from_parts(30_815_000, 6238)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::FinalSubnetEmissionWeights` (r:1 w:0)
	/// Proof: `Network::FinalSubnetEmissionWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetDelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetDelegateStakeRewardsPercentage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwnerPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetOwnerPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationIncreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationIncreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationDecreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationDecreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::QueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::QueueClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn emission_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `390340`
		//  Estimated: `1658530`
		// Minimum execution time: 12_131_847_000 picoseconds.
		Weight::from_parts(14_235_272_000, 1658530)
			.saturating_add(RocksDbWeight::get().reads(1043_u64))
			.saturating_add(RocksDbWeight::get().writes(517_u64))
	}
}