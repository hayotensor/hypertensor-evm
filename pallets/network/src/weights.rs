
//! Autogenerated weights for `pallet_network`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-07-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bob`, CPU: `11th Gen Intel(R) Core(TM) i7-11800H @ 2.30GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/solochain-template-runtime/solochain_template_runtime.compact.compressed.wasm
// --extrinsic
// 
// --pallet
// pallet_network
// --output
// pallets/network/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_network`.
pub trait WeightInfo {
	fn register_subnet() -> Weight;
	fn get_lowest_stake_balance_node_benchmark() -> Weight;
	fn get_classified_hotkeys() -> Weight;
	fn get_classified_subnet_nodes() -> Weight;
	fn perform_remove_subnet_node() -> Weight;
	fn do_increase_delegate_stake() -> Weight;
	fn elect_validator() -> Weight;
	fn calculate_stake_weights_v2() -> Weight;
	fn precheck_consensus_submission() -> Weight;
	fn calculate_rewards() -> Weight;
	fn distribute_rewards() -> Weight;
	fn increase_coldkey_reputation() -> Weight;
	fn increase_class() -> Weight;
	fn do_increase_node_delegate_stake() -> Weight;
	fn increase_account_stake() -> Weight;
	fn do_remove_subnet() -> Weight;
}

/// Weights for `pallet_network` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Network::TxPause` (r:1 w:0)
	/// Proof: `Network::TxPause` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetName` (r:1 w:1)
	/// Proof: `Network::SubnetName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRepo` (r:1 w:1)
	/// Proof: `Network::SubnetRepo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastSubnetRegistrationEpoch` (r:1 w:1)
	/// Proof: `Network::LastSubnetRegistrationEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInterval` (r:1 w:0)
	/// Proof: `Network::SubnetRegistrationInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinChurnLimit` (r:1 w:0)
	/// Proof: `Network::MinChurnLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxChurnLimit` (r:1 w:0)
	/// Proof: `Network::MaxChurnLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRegistrationQueueEpochs` (r:1 w:0)
	/// Proof: `Network::MinRegistrationQueueEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxRegistrationQueueEpochs` (r:1 w:0)
	/// Proof: `Network::MaxRegistrationQueueEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinActivationGraceEpochs` (r:1 w:0)
	/// Proof: `Network::MinActivationGraceEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxActivationGraceEpochs` (r:1 w:0)
	/// Proof: `Network::MaxActivationGraceEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinQueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MinQueueClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxQueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MaxQueueClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinIncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MinIncludedClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxIncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MaxIncludedClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetMinStake` (r:1 w:0)
	/// Proof: `Network::MinSubnetMinStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetMinStake` (r:1 w:0)
	/// Proof: `Network::MaxSubnetMinStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetMaxStake` (r:1 w:0)
	/// Proof: `Network::MinSubnetMaxStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetMaxStake` (r:1 w:0)
	/// Proof: `Network::MaxSubnetMaxStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinDelegateStakePercentage` (r:1 w:0)
	/// Proof: `Network::MinDelegateStakePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakePercentage` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinMaxRegisteredNodes` (r:1 w:0)
	/// Proof: `Network::MinMaxRegisteredNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MinSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetRegistrationFee` (r:1 w:0)
	/// Proof: `Network::MinSubnetRegistrationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetRegistrationFee` (r:1 w:0)
	/// Proof: `Network::MaxSubnetRegistrationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:0)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetUids` (r:1 w:1)
	/// Proof: `Network::TotalSubnetUids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxRegisteredNodes` (r:0 w:1)
	/// Proof: `Network::MaxRegisteredNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:0 w:1)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwner` (r:0 w:1)
	/// Proof: `Network::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInitialColdkeys` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationInitialColdkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ActivationGraceEpochs` (r:0 w:1)
	/// Proof: `Network::ActivationGraceEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetMaxStakeBalance` (r:0 w:1)
	/// Proof: `Network::SubnetMaxStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetDelegateStakeRewardsPercentage` (r:0 w:1)
	/// Proof: `Network::SubnetDelegateStakeRewardsPercentage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpoch` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetMinStakeBalance` (r:0 w:1)
	/// Proof: `Network::SubnetMinStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:0 w:1)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::QueueClassificationEpochs` (r:0 w:1)
	/// Proof: `Network::QueueClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::RegistrationQueueEpochs` (r:0 w:1)
	/// Proof: `Network::RegistrationQueueEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChurnLimit` (r:0 w:1)
	/// Proof: `Network::ChurnLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `401`
		//  Estimated: `6172`
		// Minimum execution time: 103_570_000 picoseconds.
		Weight::from_parts(121_450_000, 6172)
			.saturating_add(T::DbWeight::get().reads(33_u64))
			.saturating_add(T::DbWeight::get().writes(22_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:0)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_lowest_stake_balance_node_benchmark() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142132`
		//  Estimated: `1412797`
		// Minimum execution time: 4_574_039_000 picoseconds.
		Weight::from_parts(5_121_992_000, 1412797)
			.saturating_add(T::DbWeight::get().reads(1025_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_classified_hotkeys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `110415`
		//  Estimated: `1381080`
		// Minimum execution time: 2_245_303_000 picoseconds.
		Weight::from_parts(2_355_758_000, 1381080)
			.saturating_add(T::DbWeight::get().reads(513_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_classified_subnet_nodes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `110415`
		//  Estimated: `1381080`
		// Minimum execution time: 2_181_301_000 picoseconds.
		Weight::from_parts(2_314_233_000, 1381080)
			.saturating_add(T::DbWeight::get().reads(513_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodes` (r:1 w:1)
	/// Proof: `Network::TotalNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::PeerIdSubnetNode` (r:0 w:1)
	/// Proof: `Network::PeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeySubnetNodeId` (r:0 w:1)
	/// Proof: `Network::HotkeySubnetNodeId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeIdHotkey` (r:0 w:1)
	/// Proof: `Network::SubnetNodeIdHotkey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BootstrapPeerIdSubnetNode` (r:0 w:1)
	/// Proof: `Network::BootstrapPeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn perform_remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4446`
		//  Estimated: `7911`
		// Minimum execution time: 99_571_000 picoseconds.
		Weight::from_parts(112_050_000, 7911)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(14_u64))
	}
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn do_increase_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 7_043_000 picoseconds.
		Weight::from_parts(7_487_000, 3541)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn elect_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `664`
		//  Estimated: `4129`
		// Minimum execution time: 23_698_000 picoseconds.
		Weight::from_parts(25_664_000, 4129)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_stake_weights_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7194`
		//  Estimated: `169059`
		// Minimum execution time: 518_114_000 picoseconds.
		Weight::from_parts(648_518_000, 169059)
			.saturating_add(T::DbWeight::get().reads(130_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn precheck_consensus_submission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38559`
		//  Estimated: `42024`
		// Minimum execution time: 105_559_000 picoseconds.
		Weight::from_parts(114_318_000, 42024)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::SubnetDelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetDelegateStakeRewardsPercentage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwnerPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetOwnerPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn calculate_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `614`
		//  Estimated: `4079`
		// Minimum execution time: 20_041_000 picoseconds.
		Weight::from_parts(21_761_000, 4079)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationIncreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationIncreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationDecreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationDecreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::QueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::QueueClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35031`
		//  Estimated: `1303221`
		// Minimum execution time: 8_434_175_000 picoseconds.
		Weight::from_parts(8_783_615_000, 1303221)
			.saturating_add(T::DbWeight::get().reads(1038_u64))
			.saturating_add(T::DbWeight::get().writes(517_u64))
	}
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_coldkey_reputation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1707`
		//  Estimated: `5172`
		// Minimum execution time: 27_198_000 picoseconds.
		Weight::from_parts(30_250_000, 5172)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_class() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1925`
		//  Estimated: `5390`
		// Minimum execution time: 27_891_000 picoseconds.
		Weight::from_parts(31_723_000, 5390)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalNodeDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalNodeDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodeDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalNodeDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodeDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalNodeDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn do_increase_node_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1191`
		//  Estimated: `4656`
		// Minimum execution time: 30_106_000 picoseconds.
		Weight::from_parts(34_611_000, 4656)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn increase_account_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1873`
		//  Estimated: `5338`
		// Minimum execution time: 34_683_000 picoseconds.
		Weight::from_parts(42_940_000, 5338)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:1)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnets` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:512 w:512)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::PeerIdSubnetNode` (r:512 w:512)
	/// Proof: `Network::PeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BootstrapPeerIdSubnetNode` (r:512 w:512)
	/// Proof: `Network::BootstrapPeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeySubnetNodeId` (r:512 w:512)
	/// Proof: `Network::HotkeySubnetNodeId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeIdHotkey` (r:512 w:512)
	/// Proof: `Network::SubnetNodeIdHotkey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInitialColdkeys` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationInitialColdkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:0 w:1)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetName` (r:0 w:1)
	/// Proof: `Network::SubnetName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodeUids` (r:0 w:1)
	/// Proof: `Network::TotalSubnetNodeUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpoch` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:0 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_remove_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `138853`
		//  Estimated: `1407043`
		// Minimum execution time: 2_607_639_000 picoseconds.
		Weight::from_parts(2_781_900_000, 1407043)
			.saturating_add(T::DbWeight::get().reads(2568_u64))
			.saturating_add(T::DbWeight::get().writes(2572_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Network::TxPause` (r:1 w:0)
	/// Proof: `Network::TxPause` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetName` (r:1 w:1)
	/// Proof: `Network::SubnetName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRepo` (r:1 w:1)
	/// Proof: `Network::SubnetRepo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::LastSubnetRegistrationEpoch` (r:1 w:1)
	/// Proof: `Network::LastSubnetRegistrationEpoch` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInterval` (r:1 w:0)
	/// Proof: `Network::SubnetRegistrationInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinChurnLimit` (r:1 w:0)
	/// Proof: `Network::MinChurnLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxChurnLimit` (r:1 w:0)
	/// Proof: `Network::MaxChurnLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinRegistrationQueueEpochs` (r:1 w:0)
	/// Proof: `Network::MinRegistrationQueueEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxRegistrationQueueEpochs` (r:1 w:0)
	/// Proof: `Network::MaxRegistrationQueueEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinActivationGraceEpochs` (r:1 w:0)
	/// Proof: `Network::MinActivationGraceEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxActivationGraceEpochs` (r:1 w:0)
	/// Proof: `Network::MaxActivationGraceEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinQueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MinQueueClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxQueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MaxQueueClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinIncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MinIncludedClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxIncludedClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::MaxIncludedClassificationEpochs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetMinStake` (r:1 w:0)
	/// Proof: `Network::MinSubnetMinStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetMinStake` (r:1 w:0)
	/// Proof: `Network::MaxSubnetMinStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetMaxStake` (r:1 w:0)
	/// Proof: `Network::MinSubnetMaxStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetMaxStake` (r:1 w:0)
	/// Proof: `Network::MaxSubnetMaxStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinDelegateStakePercentage` (r:1 w:0)
	/// Proof: `Network::MinDelegateStakePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxDelegateStakePercentage` (r:1 w:0)
	/// Proof: `Network::MaxDelegateStakePercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinMaxRegisteredNodes` (r:1 w:0)
	/// Proof: `Network::MinMaxRegisteredNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetNodes` (r:1 w:0)
	/// Proof: `Network::MinSubnetNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinSubnetRegistrationFee` (r:1 w:0)
	/// Proof: `Network::MinSubnetRegistrationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetRegistrationFee` (r:1 w:0)
	/// Proof: `Network::MaxSubnetRegistrationFee` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::TotalIssuance` (r:1 w:0)
	/// Proof: `Balances::TotalIssuance` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetUids` (r:1 w:1)
	/// Proof: `Network::TotalSubnetUids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxRegisteredNodes` (r:0 w:1)
	/// Proof: `Network::MaxRegisteredNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::IncludedClassificationEpochs` (r:0 w:1)
	/// Proof: `Network::IncludedClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwner` (r:0 w:1)
	/// Proof: `Network::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInitialColdkeys` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationInitialColdkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ActivationGraceEpochs` (r:0 w:1)
	/// Proof: `Network::ActivationGraceEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetMaxStakeBalance` (r:0 w:1)
	/// Proof: `Network::SubnetMaxStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetDelegateStakeRewardsPercentage` (r:0 w:1)
	/// Proof: `Network::SubnetDelegateStakeRewardsPercentage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpoch` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetMinStakeBalance` (r:0 w:1)
	/// Proof: `Network::SubnetMinStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:0 w:1)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::QueueClassificationEpochs` (r:0 w:1)
	/// Proof: `Network::QueueClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::RegistrationQueueEpochs` (r:0 w:1)
	/// Proof: `Network::RegistrationQueueEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ChurnLimit` (r:0 w:1)
	/// Proof: `Network::ChurnLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `401`
		//  Estimated: `6172`
		// Minimum execution time: 103_570_000 picoseconds.
		Weight::from_parts(121_450_000, 6172)
			.saturating_add(RocksDbWeight::get().reads(33_u64))
			.saturating_add(RocksDbWeight::get().writes(22_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:0)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_lowest_stake_balance_node_benchmark() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142132`
		//  Estimated: `1412797`
		// Minimum execution time: 4_574_039_000 picoseconds.
		Weight::from_parts(5_121_992_000, 1412797)
			.saturating_add(RocksDbWeight::get().reads(1025_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_classified_hotkeys() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `110415`
		//  Estimated: `1381080`
		// Minimum execution time: 2_245_303_000 picoseconds.
		Weight::from_parts(2_355_758_000, 1381080)
			.saturating_add(RocksDbWeight::get().reads(513_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:513 w:0)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_classified_subnet_nodes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `110415`
		//  Estimated: `1381080`
		// Minimum execution time: 2_181_301_000 picoseconds.
		Weight::from_parts(2_314_233_000, 1381080)
			.saturating_add(RocksDbWeight::get().reads(513_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:1)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodes` (r:1 w:1)
	/// Proof: `Network::TotalNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::PeerIdSubnetNode` (r:0 w:1)
	/// Proof: `Network::PeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeySubnetNodeId` (r:0 w:1)
	/// Proof: `Network::HotkeySubnetNodeId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeIdHotkey` (r:0 w:1)
	/// Proof: `Network::SubnetNodeIdHotkey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:0 w:1)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BootstrapPeerIdSubnetNode` (r:0 w:1)
	/// Proof: `Network::BootstrapPeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn perform_remove_subnet_node() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4446`
		//  Estimated: `7911`
		// Minimum execution time: 99_571_000 picoseconds.
		Weight::from_parts(112_050_000, 7911)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(14_u64))
	}
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn do_increase_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 7_043_000 picoseconds.
		Weight::from_parts(7_487_000, 3541)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::SubnetElectedValidator` (r:1 w:1)
	/// Proof: `Network::SubnetElectedValidator` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `InsecureRandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `InsecureRandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	fn elect_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `664`
		//  Estimated: `4129`
		// Minimum execution time: 23_698_000 picoseconds.
		Weight::from_parts(25_664_000, 4129)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalDelegateStake` (r:1 w:0)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetsData` (r:65 w:0)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:64 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn calculate_stake_weights_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `7194`
		//  Estimated: `169059`
		// Minimum execution time: 518_114_000 picoseconds.
		Weight::from_parts(648_518_000, 169059)
			.saturating_add(RocksDbWeight::get().reads(130_u64))
	}
	/// Storage: `Network::SubnetConsensusSubmission` (r:1 w:0)
	/// Proof: `Network::SubnetConsensusSubmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn precheck_consensus_submission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `38559`
		//  Estimated: `42024`
		// Minimum execution time: 105_559_000 picoseconds.
		Weight::from_parts(114_318_000, 42024)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Network::SubnetDelegateStakeRewardsPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetDelegateStakeRewardsPercentage` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetOwnerPercentage` (r:1 w:0)
	/// Proof: `Network::SubnetOwnerPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn calculate_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `614`
		//  Estimated: `4079`
		// Minimum execution time: 20_041_000 picoseconds.
		Weight::from_parts(21_761_000, 4079)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Network::MinAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationIncreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationIncreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ReputationDecreaseFactor` (r:1 w:0)
	/// Proof: `Network::ReputationDecreaseFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MinVastMajorityAttestationPercentage` (r:1 w:0)
	/// Proof: `Network::MinVastMajorityAttestationPercentage` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::QueueClassificationEpochs` (r:1 w:0)
	/// Proof: `Network::QueueClassificationEpochs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::MaxSubnetNodePenalties` (r:1 w:0)
	/// Proof: `Network::MaxSubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodePenalties` (r:512 w:0)
	/// Proof: `Network::SubnetNodePenalties` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::AccountSubnetStake` (r:512 w:512)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BaseValidatorReward` (r:1 w:0)
	/// Proof: `Network::BaseValidatorReward` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeyOwner` (r:1 w:0)
	/// Proof: `Network::HotkeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalSubnetDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetDelegateStakeShares` (r:1 w:0)
	/// Proof: `Network::TotalSubnetDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn distribute_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35031`
		//  Estimated: `1303221`
		// Minimum execution time: 8_434_175_000 picoseconds.
		Weight::from_parts(8_783_615_000, 1303221)
			.saturating_add(RocksDbWeight::get().reads(1038_u64))
			.saturating_add(RocksDbWeight::get().writes(517_u64))
	}
	/// Storage: `Network::ColdkeyReputation` (r:1 w:1)
	/// Proof: `Network::ColdkeyReputation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_coldkey_reputation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1707`
		//  Estimated: `5172`
		// Minimum execution time: 27_198_000 picoseconds.
		Weight::from_parts(30_250_000, 5172)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::SubnetNodesData` (r:1 w:1)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increase_class() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1925`
		//  Estimated: `5390`
		// Minimum execution time: 27_891_000 picoseconds.
		Weight::from_parts(31_723_000, 5390)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Network::TotalNodeDelegateStakeBalance` (r:1 w:1)
	/// Proof: `Network::TotalNodeDelegateStakeBalance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodeDelegateStakeShares` (r:1 w:1)
	/// Proof: `Network::TotalNodeDelegateStakeShares` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalNodeDelegateStake` (r:1 w:1)
	/// Proof: `Network::TotalNodeDelegateStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn do_increase_node_delegate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1191`
		//  Estimated: `4656`
		// Minimum execution time: 30_106_000 picoseconds.
		Weight::from_parts(34_611_000, 4656)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::AccountSubnetStake` (r:1 w:1)
	/// Proof: `Network::AccountSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetStake` (r:1 w:1)
	/// Proof: `Network::TotalSubnetStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalStake` (r:1 w:1)
	/// Proof: `Network::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn increase_account_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1873`
		//  Estimated: `5338`
		// Minimum execution time: 34_683_000 picoseconds.
		Weight::from_parts(42_940_000, 5338)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Network::SubnetsData` (r:1 w:1)
	/// Proof: `Network::SubnetsData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnets` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodesData` (r:512 w:512)
	/// Proof: `Network::SubnetNodesData` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveSubnetNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalActiveNodes` (r:1 w:1)
	/// Proof: `Network::TotalActiveNodes` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::PeerIdSubnetNode` (r:512 w:512)
	/// Proof: `Network::PeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::BootstrapPeerIdSubnetNode` (r:512 w:512)
	/// Proof: `Network::BootstrapPeerIdSubnetNode` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::HotkeySubnetNodeId` (r:512 w:512)
	/// Proof: `Network::HotkeySubnetNodeId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetNodeIdHotkey` (r:512 w:512)
	/// Proof: `Network::SubnetNodeIdHotkey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Number` (r:1 w:0)
	/// Proof: `System::Number` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::ExecutionPhase` (r:1 w:0)
	/// Proof: `System::ExecutionPhase` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	/// Storage: `System::EventCount` (r:1 w:1)
	/// Proof: `System::EventCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Events` (r:1 w:1)
	/// Proof: `System::Events` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationInitialColdkeys` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationInitialColdkeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetPenaltyCount` (r:0 w:1)
	/// Proof: `Network::SubnetPenaltyCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetName` (r:0 w:1)
	/// Proof: `Network::SubnetName` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodeUids` (r:0 w:1)
	/// Proof: `Network::TotalSubnetNodeUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::SubnetRegistrationEpoch` (r:0 w:1)
	/// Proof: `Network::SubnetRegistrationEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Network::TotalSubnetNodes` (r:0 w:1)
	/// Proof: `Network::TotalSubnetNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_remove_subnet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `138853`
		//  Estimated: `1407043`
		// Minimum execution time: 2_607_639_000 picoseconds.
		Weight::from_parts(2_781_900_000, 1407043)
			.saturating_add(RocksDbWeight::get().reads(2568_u64))
			.saturating_add(RocksDbWeight::get().writes(2572_u64))
	}
}